package kr.spring.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.spring.entity.Board;
import kr.spring.mapper.BoardMapper;

//게시판에 대한 모든 기능 BoardController가 수행한다 
//핸들러매핑이 BoardController를 찾기위해 어노테이션 

@Controller //현재클래스를 핸들러맵핑이 찾기위해 컨트롤러로 등록하는 부분 
public class BoardController {
	
	
	@Autowired //spring에 BoardMapper 객체 생성되는것을 사용한다
	private BoardMapper mapper; //mapper: MyBatis한테 JDBC 실행하게 요청하는 객체 

	
	
	@RequestMapping("/") //요청 url로 들어왔을때 아래 기능을 수행 하겠다 
	public String home() {
		System.out.println("홈 기능수행");
		return "redirect:/boardList.do"; //redirect방식(뷰네임을 돌려주는것이 아닌 다시 접속할 url를 돌려주는것)
	}
	

	
	@RequestMapping("/boardList.do") 
	public String boardList(Model model) { //메소드는 보통 요청URL에 맞춰서 이름을 짓는것이 관례이다 
		System.out.println("게시판목록보기 기능수행");
			
		//전체 게시글 조회기능
		List<Board> list = mapper.getLists();

        //게시글 정보는 하나의 페이지에서만 확인한다 → model을 활용한다
        //객체바인딩(동적바인딩): model이든 request든 이러한 공간에 데이터를 담는것, 서버든 어디든 특정영역안에 데이터를 요청에 따라서 넣고 이동하는 방식 
        model.addAttribute("list", list); //list이름으로 list를 담아준다 
        
		return "boardList"; //view name을 돌려준다, 원래는 내가 최종적으로 이동해야 할 /WEB-INF/views/boardList.jsp로 돌려줘야한다 
		                    // forward방식
	}
	
	
	
	@RequestMapping("/boardForm.do")  
	public String boardForm() {
		System.out.println("글쓰기페이지로 이동");
		return "boardForm";
	}
	
	

	//name="title",name="content",name="writer" 데이터가 /boardInsert.do로 넘어오게 된다 
	@RequestMapping("/boardInsert.do")
	public String boardInsert(Board board) { //title,content,writer 필드값이 같으므로 Board board로 하면 담겨온다
		                                     // 조건이 있다 1.name의 값과 필드명이 같아야함 2.NoArgsConstructor 기본생성자가 있어야한다 	                                     	
		System.out.println("게시글 등록 기능구현");
		mapper.boardInsert(board); //데이터베이스 관련은 mapper에게 요청한다, boardInsert기능 mapper에게 요청한다, board 정보를 넘긴다
		                           //create method로 → BoardMapper로 이동한다
		return "redirect:/boardList.do";
	}
	
	
	@RequestMapping("/boardContent.do")
	public String boardContent(@RequestParam("idx") int idx, Model model) { //idx 데이터 하나만 넘어온다
		                                                                    //vo를 boardContent로 넘길 수 있는 방법은? model에 담아서 이동한다
		System.out.println("게시글 상세보기 기능수행");
		Board vo = mapper.boardContent(idx);
		model.addAttribute("vo", vo);
		return "boardContent";
	}
	
	
	@RequestMapping("/boardDelete.do")
	public String boardDelete(@RequestParam("idx") int idx) {
		
		System.out.println("게시글 삭제 기능수행");
		mapper.boardDelete(idx); //create method로 → BoardMapper로 이동한다
		return "redirect:/boardList.do"; //새로운 게시글 정보를 다시 받아서 가야한다 
	}
	
	
	
	@RequestMapping("/boardUpdateForm.do")
	public String boardUpdateForm() {
		System.out.println("게시글 수정화면이동 기능수행");
		
		return "boardUpdateForm"; //boardUpdateform.jsp로 이동한다 
	}
	

}




